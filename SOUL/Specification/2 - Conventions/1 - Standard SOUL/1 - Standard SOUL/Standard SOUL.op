Standard SOUL
	
	Philosophy
		
		-
			A standard SOUL is a SOUL implemented using a standard module, along with certain
			conventions to ensure cross compatibility.
		-
	
	Principles

		Input and Output

			Object Types

				-
					Objects passed to the train and generate functions in a standard SOUL must be
					lists of numbers between zero and one, inclusive.
				-
			
			String Conversion

				-
					Strings may be converted to and from a list of numbers for use as inputs and
					outputs for standard SOULs where each character corresponds to its character
					code divided by the maximum character value if the character code is greater
					than zero, or to zero if the character code is zero.

					The default character encoding for use with a standard SOUL is UTF-32.
				-
		
		SOUL Core Models
			
			-
				As there are various ways of implementing artificial intelligence, there are
				various ways of implementing a SOUL Core, some of which my be more suited to
				certain tasks. The various possible implementations of a standard SOUL core, which
				are referred to as models, must each have a name with which they can be identified
				and have a custom file format storing its state. Therefore, the standard SOUL Core
				must have a function for switching what model it is currently using, as well as a
				function for passing arguments to said model. A SOUL Core may only use one model at
				a time for processing, but it may train multiple models at once.
			-
		
		SOUL Core Format
			
			-
				A standard SOUL Core must save its state as a ONE document. The document must have
				two elements: an element with the content "Corpus", and an element with the content
				"Models".
				
				For every input/output/correlation set in the Core's corpus, the corpus element
				must have a child with the content "Set". This child must have three children: an
				element with the content "Input", and element with the content "Output", and
				element with the content "Correlation". Each one of said elements must have a child
				with content containing its respective value.
				
				For every model the Core contains, it must have a child with content containing the
				model's name. Each such element must have a child with the state of its respective
				model encoded in said model's custom file format as its content.
			-